@model AuctionViewModel

<div class="modal-header">
    <h5 class="modal-title">Edit Auction</h5>
    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
    </button>
</div>
<form id="editForm">
    <div class="modal-body">

        <input type="hidden" name="Id" value="@Model.Auction.Id" />

        <div class="form-group">
            <label for="Title">Title</label>
            <input type="text" class="form-control" name="Title" id="Title" value="@Model.Auction.Title" />
        </div>

        <div class="form-group">
            <label for="Title">Category</label>
            <select class="form-control" name="CategoryId">
                @foreach (var category in Model.Categories)
                {
                    var selected = category.Id == Model.Auction.CategoryId ? "selected" : string.Empty;
                    <option @selected value="@category.Id">@category.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="Description">Description</label>
            <input type="text" class="form-control" name="Description" id="Description" value="@Model.Auction.Description" />
        </div>

        <div class="form-group">
            <label for="ActualPrice">Actual Price</label>
            <input type="number" class="form-control" name="ActualPrice" id="ActualPrice" value="@Model.Auction.ActualPrice" />
        </div>

        <div class="form-group">
            <label for="StartingTime">Starting Time</label>
            <input type="text" class="form-control" name="StartingTime" id="StartingTime" value="@Model.Auction.StartingTime" />
        </div>

        <div class="form-group">
            <label for="EndingTime">Ending Time</label>
            <input type="text" class="form-control" name="EndingTime" id="EndingTime" value="@Model.Auction.EndingTime" />
        </div>

        <div class="form-group">
            <label for="selectPictures" class="btn btn-warning" style="cursor:pointer">
                Select Pictures
                @if (Model.Auction.AuctionPictures != null && Model.Auction.AuctionPictures.Count() > 0)
                {
                    <span id="existFileLength" class="badge badge-warning p-1">@Model.Auction.AuctionPictures.Count pictures.</span>
                }
                <span id="fileLength" class="badge badge-warning p-1" style="display:none"></span>
            </label>
            <span class="float-right badge badge-pill p-1 mt-2">Press on pic to remove it</span>

            <input type="file" class="form-control" name="AuctionPictures" id="selectPictures" style="display:none" multiple />
            <input type="hidden" id="pictureIds" name="AuctionPictures" />
            <div id="picsArea">
                @if (Model.Auction.AuctionPictures != null && Model.Auction.AuctionPictures.Count() > 0)
                {
                    foreach (var auctionPic in Model.Auction.AuctionPictures)
                    {
                        <img src="@auctionPic.Picture.Url" class="image img-thumbnail" data-id="@auctionPic.PictureId" style="width:230px;" />
                    }
                }
            </div>
        </div>

        <div id="divError" class="form-group alert alert-danger" style="display:none;">
        </div>

    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-success" id="updateBtn">Update</button>
    </div>

</form>

<script>
    //need to call remove functions to work in edit
    RemoveImageOnClick();

    var d = new Date();
    var month = d.getMonth() + 1;
    var day = d.getDate();

    var currentDate = (month < 10 ? '0' : '') + month + '/' + (day < 10 ? '0' : '') + day + '/' + d.getFullYear();

    $('input[name="StartingTime"]').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        drops: 'up',
        minDate: currentDate,
        timePicker: true,
        minYear: parseInt(moment().format('YYYY')),
        maxYear: parseInt(moment().format('YYYY'), 11),
        locale: {
            format: 'M/DD/YYYY hh:mm A',
        }
    });

    $('input[name="EndingTime"]').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        drops: 'up',
        minDate: currentDate,
        timePicker: true,
        minYear: parseInt(moment().format('YYYY')),
        maxYear: parseInt(moment().format('YYYY'), 11),
        locale: {
            format: 'M/DD/YYYY hh:mm A',
        }
    });


    @* validate form *@
    $("#editForm").validate({
        rules: {
            Title: {
                required: true,
                minlength: 15,
                maxlength: 150
            },
            ActualPrice: {
                required: true,
                range: [1, 1000000]
            }
        },
        messages: {
            Title: {
                required: "Title is rquired.",
                minlength: "Minmum length is 15",
                maxlength: "Maximum length is 150"
            },
            ActualPrice: {
                required: "Actual price is required.",
                range: "Invalid price."
            }
        },
        errorClass: "text-danger"
    })

    $("#updateBtn").click(function () {
        if ($("#editForm").valid()) {
            var picIds = [];

            $("#picsArea .image").each(function () {
                var picId = $(this).attr("data-id");

                picIds.push(picId);
            })

            $("#pictureIds").val(picIds);

            $.ajax({
                url: '@Url.Action("Edit","Auctions")',
                method: 'Post',
                data: $("#editForm").serialize(),
            }).done(function (response) {
                debugger;
                if (response.success) {
                    ReloadListing(); //read the list of auctions after action on (edit)
                    $("#formModal").modal("toggle"); //to dismiss modal after finish
                } else {
                    $("#divError").html(response.message);
                    $("#divError").show();
                }
            }).fail(function () {
                alert("Fail");
            });
        }
    })

    $("#selectPictures").change(function () {
        var pictures = this.files;
        var picsLength = pictures.length;

        if (pictures.length > 10) {
            alert("Not allowed to upload more than 10 pictures in one time.");
            picsLength = 10;
        }

        var picsData = new FormData();

        for (var i = 0; i < picsLength; i++) {
            picsData.append("Picture", pictures[i]);
        }

        $.ajax({
            url: '@Url.Action("UploadPictures", "Shared")',
            type: 'Post',
            data: picsData,
            dataType: 'json',
            processData: false,
            contentType: false
        }).done(function (responses) {
            for (var i = 0; i < responses.length; i++) {
                var picResponse = responses[i];

                AttachNewImage(picResponse.id, picResponse.url);
            }

            debugger;
            var oldLength;
            var newLength;
            if ($("#existFileLength").text()) //exist pics from db.
            {
                oldLength = $("#existFileLength").text()[0];
                newLength = parseFloat(oldLength) + parseFloat(picsLength);

            } else if ($("#fileLength").text()) //exist pics uploaded.
            {
                oldLength = $("#fileLength").text()[0];
                newLength = parseFloat(oldLength) + parseFloat(picsLength);
            } else {
                newLength = picsLength; //first time.
            }

            $("#existFileLength").empty()
            $("#fileLength").empty();
            $("#fileLength").append(newLength + " pictures. ");
            $("#fileLength").show();
        }).fail(function () {
            alert("Fail");
        });
    })


</script>